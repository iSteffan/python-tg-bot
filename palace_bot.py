import asyncio
import re
from telethon import TelegramClient, events
import requests
import os
from dotenv import load_dotenv

load_dotenv()

# üîê –¢–≤—ñ–π Telegram API ID/Hash
api_id = os.getenv("API_ID")
api_hash = os.getenv("API_HASH")

# ü§ñ –î–∞–Ω—ñ Telegram-–±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# üßæ –ü—Ä–∞–≤–∏–ª–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: –Ω–∞–∑–≤–∞ ‚Üí –º–∞–∫—Å. —Ü—ñ–Ω–∞
FILTER_RULES = {
    "King": 4.5,
    "Doodles Dark Mode": 11,
    "Mememania": 4.5,
    "Pengu Valentines": 15,
    "Cool Blue Pengu": 80,
    "Blue Pengu": 35
}

# üì§ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": text}
    try:
        res = requests.post(url, data=payload)
        if not res.ok:
            print(f"‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: {res.text}")
    except Exception as e:
        print(f"‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ: {e}")

# üåü –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ "–≥–∞—Ä–Ω—ñ –Ω–æ–º–µ—Ä–∏"
def is_special_number(n):
    str_n = str(n)

    # 1‚Äì30
    if 1 <= n <= 30:
        return True

    # –°–æ—Ç–Ω—ñ, —Ç–∏—Å—è—á—ñ
    if n % 100 == 0 or n % 1000 == 0:
        return True

    # –î–∑–µ—Ä–∫–∞–ª—å–Ω—ñ —Ç–∏–ø—É 1221
    if str_n == str_n[::-1]:
        return True

    # –í—Å—ñ –æ–¥–Ω–∞–∫–æ–≤—ñ —Ü–∏—Ñ—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 111, 2222)
    if len(set(str_n)) == 1:
        return True

    return False

# üß† –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
def filter_message(msg_text):
    name_match = re.search(r'Name:\s*(.+?)\s+#(\d+)', msg_text)
    cost_match = re.search(r'Cost:\s*([\d.]+)\s*TON', msg_text)

    if not name_match or not cost_match:
        return None

    raw_name = name_match.group(1).strip()
    number = int(name_match.group(2))
    cost = float(cost_match.group(1))
    normalized_name = raw_name.lower()

    # üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ –Ω–∞–∑–≤—ñ —Ç–∞ —Ü—ñ–Ω—ñ
    for key in FILTER_RULES:
        if key.lower() in normalized_name:
            max_price = FILTER_RULES[key]
            if cost < max_price:
                return f"üîé –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π —Å—Ç—ñ–∫–µ—Ä:\n{raw_name} #{number}, {cost} TON"

    # üíé –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≥–∞—Ä–Ω—ñ –Ω–æ–º–µ—Ä–∏
    if is_special_number(number):
        return f"üåü –ó–Ω–∞–π–¥–µ–Ω–æ –≥–∞—Ä–Ω–∏–π –Ω–æ–º–µ—Ä:\n{raw_name} #{number}, {cost} TON"

    return None

# ü§ñ Telegram-–∫–ª—ñ—î–Ω—Ç
client = TelegramClient('session_name', api_id, api_hash)

@client.on(events.NewMessage(chats='palaceoffers'))
async def handler(event):
    msg = event.message.message
    result = filter_message(msg)
    if result:
        send_telegram_message(result)
        print(f"‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {result}")
    else:
        print("‚Äî –ü—Ä–æ–ø—É—â–µ–Ω–æ")

async def main():
    print("‚úÖ –ë–æ—Ç —Å–ª—É—Ö–∞—î @palaceoffers —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ...")
    await client.start()
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())
